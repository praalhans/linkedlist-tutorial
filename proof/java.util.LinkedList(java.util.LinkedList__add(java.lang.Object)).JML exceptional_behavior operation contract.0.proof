\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jan 15 12:33:06 CET 2020
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\bootclasspath "../jre";

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Jan 15 12:33:06 CET 2020
name=java.util.LinkedList[java.util.LinkedList\\:\\:add(java.lang.Object)].JML exceptional_behavior operation contract.0
contract=java.util.LinkedList[java.util.LinkedList\\:\\:add(java.lang.Object)].JML exceptional_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mac" ) (keyVersion "7d3deab0763c88edee4f7a08e604661e0dbdd450"))

(autoModeTime "329")

(branch "dummy ID"
(rule "instanceof_static_type" (formula "1") (term "0,0,0,1,0,0,1,1") (newnames "e,self,result,exc,heapAtPre,o,f"))
(rule "boolean_equal" (formula "1") (term "0,0,1,0,0,1,1"))
(rule "insert_constant_value" (formula "1") (term "1,0,1,0"))
(rule "concrete_impl_1" (formula "1") (term "0,1,0,0,1,1"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "9") (term "1"))
(rule "sequentialToParallel2" (formula "9"))
(rule "simplifyUpdate3" (formula "9") (term "1,0"))
(rule "all_unused" (formula "9") (term "1,0,1"))
(rule "all_unused" (formula "9") (term "1,0,1"))
(rule "concrete_and_3" (formula "9") (term "0,1"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_add,savedHeapBefore_add"))
(rule "simplifyUpdate2" (formula "9") (term "1"))
(builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_checkSize,exc_0") (contract "java.util.LinkedList[java.util.LinkedList::checkSize()].JML exceptional_behavior operation contract.0#java.util.LinkedList[java.util.LinkedList::checkSize()].JML normal_behavior operation contract.0"))
(branch "Post (checkSize)"
   (rule "instanceof_static_type" (formula "8") (term "0,0,0,1,1,0,1,1,1"))
   (rule "boolean_equal" (formula "8") (term "0,0,1,1,0,1,1,1"))
   (rule "insert_constant_value" (formula "8") (term "1,0,0,0,1,1,1"))
   (rule "concrete_impl_1" (formula "8") (term "0,1,1,0,1,1,1"))
   (rule "insert_constant_value" (formula "8") (term "1,0,0,0,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "typeEqDerived" (formula "9") (term "0,1,1,1,0,1") (ifseqformula "8"))
   (rule "boolean_equal" (formula "9") (term "1,1,1,0,1"))
   (rule "concrete_and_3" (formula "9") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "replace_known_left" (formula "10") (term "1,1") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "10") (term "1"))
   (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "7"))
   (rule "concrete_impl_4" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "replace_known_left" (formula "9") (term "0,0,1") (ifseqformula "8"))
   (rule "concrete_not_1" (formula "9") (term "0,1"))
   (rule "concrete_and_2" (formula "9") (term "1"))
   (rule "concrete_impl_3" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "applyOnRigidFormula" (formula "9") (term "1"))
   (rule "applyOnPV" (formula "9") (term "0,1"))
   (rule "simplifyUpdate1" (formula "9") (term "1,1"))
   (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "9"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate1" (formula "9") (term "1"))
   (rule "applyOnRigidTerm" (formula "9") (term "0"))
   (rule "applyOnRigidTerm" (formula "9") (term "0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "2,0,0"))
   (rule "applyOnPV" (formula "9") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0,0"))
   (rule "close" (formula "9") (ifseqformula "6"))
)
(branch "Exceptional Post (checkSize)"
   (rule "instanceof_static_type" (formula "8") (term "0,0,0,1,1,0,1,1,1"))
   (rule "boolean_equal" (formula "8") (term "0,0,1,1,0,1,1,1"))
   (rule "insert_constant_value" (formula "8") (term "1,0,0,0,1,1,1"))
   (rule "concrete_impl_1" (formula "8") (term "0,1,1,0,1,1,1"))
   (rule "insert_constant_value" (formula "8") (term "1,0,0,0,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "replace_known_left" (formula "9") (term "0,1,1") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "9") (term "1,1"))
   (rule "replace_known_right" (formula "9") (term "0,0,1") (ifseqformula "11"))
   (rule "concrete_not_2" (formula "9") (term "0,1"))
   (rule "concrete_and_1" (formula "9") (term "1"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "10") (term "1"))
   (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "11"))
   (rule "concrete_impl_3" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "applyOnRigidFormula" (formula "9") (term "0"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "applyOnRigidFormula" (formula "9") (term "1,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,1,0"))
   (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "9") (term "0"))
   (rule "applyOnRigidFormula" (formula "10") (term "0"))
   (rule "applyOnRigidFormula" (formula "10") (term "1"))
   (rule "applyOnPV" (formula "10") (term "0,1"))
   (rule "simplifyUpdate1" (formula "10") (term "1,1"))
   (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "10"))
   (rule "notRight" (formula "10"))
   (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
   (rule "concrete_impl_1" (formula "10"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
   (rule "methodCallParamThrow" (formula "12") (term "1"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "tryCatchThrow" (formula "12") (term "1"))
   (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "12") (term "1"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "10"))
   (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
   (rule "lenNonNegative" (formula "6") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
   (rule "qeq_literals" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "ifElseSplit" (formula "12"))
   (branch "if x true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "10"))
      (rule "simplifyUpdate1" (formula "10") (term "1"))
      (rule "applyOnPV" (formula "10") (term "0"))
      (rule "boolean_not_equal_2" (formula "10"))
      (rule "false_right" (formula "10"))
      (rule "ifElseSplit" (formula "12"))
      (branch "if exc_0 instanceof java.lang.Throwable true"
         (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
         (rule "ifthenelse_concrete4" (formula "1") (term "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
         (rule "concrete_or_4" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "e_1"))
         (rule "delete_unnecessary_cast" (formula "12") (term "1"))
         (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
            (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
            (rule "boolean_equal" (formula "1") (term "1,1"))
            (rule "concrete_or_3" (formula "1") (term "1"))
            (rule "true_left" (formula "1"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0"))
            (rule "assignment" (formula "12") (term "1"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "simplifyUpdate2" (formula "12"))
            (rule "simplifyUpdate3" (formula "12") (term "0"))
            (rule "applyOnElementary" (formula "12") (term "0"))
            (rule "applyOnPV" (formula "12") (term "0,0"))
            (rule "emptyModality" (formula "12") (term "1"))
            (rule "applyOnRigidFormula" (formula "12"))
            (rule "applyOnRigidFormula" (formula "12") (term "0"))
            (rule "applyOnRigidFormula" (formula "12") (term "1"))
            (rule "simplifyUpdate2" (formula "12") (term "0,1"))
            (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "7"))
            (rule "concrete_and_1" (formula "12") (term "1"))
            (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
            (rule "applyOnPV" (formula "12") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
            (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "10"))
            (rule "concrete_not_2" (formula "12") (term "0"))
            (rule "concrete_and_1" (formula "12"))
            (rule "applyOnRigidFormula" (formula "12"))
            (rule "simplifyUpdate1" (formula "12") (term "1"))
            (rule "applyOnRigidTerm" (formula "12") (term "0"))
            (rule "applyOnPV" (formula "12") (term "0,0"))
            (rule "closeType" (formula "9") (ifseqformula "12"))
         )
         (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
            (rule "instanceof_static_type" (formula "12") (term "0,1,1"))
            (rule "boolean_equal" (formula "12") (term "1,1"))
            (rule "concrete_or_3" (formula "12") (term "1"))
            (rule "closeTrue" (formula "12"))
         )
      )
      (branch "if exc_0 instanceof java.lang.Throwable false"
         (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
         (rule "concrete_or_4" (formula "1") (term "0,1"))
         (rule "double_not" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "typeEqDerived" (formula "10") (term "0") (ifseqformula "1"))
         (rule "close" (formula "11") (ifseqformula "1"))
      )
   )
)
(branch "Pre (checkSize)"
   (rule "insert_constant_value" (formula "9") (term "1,0,0,0,1,1"))
   (rule "insert_constant_value" (formula "9") (term "1,0,0,1,0,1,1"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "6"))
   (rule "concrete_and_1" (formula "9") (term "0,0"))
   (rule "replace_known_left" (formula "9") (term "0,0,1,0") (ifseqformula "6"))
   (rule "concrete_not_1" (formula "9") (term "0,1,0"))
   (rule "concrete_and_2" (formula "9") (term "1,0"))
   (rule "concrete_or_4" (formula "9") (term "0"))
   (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "9"))
   (rule "close" (formula "9") (ifseqformula "1"))
)
)

}
